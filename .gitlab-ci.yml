
stages:         # List of stages for jobs, and their order of execution
  - merge
  - test
  - build
  - docker
  - deploy

variables:
  APP_NAME: ${CI_COMMIT_BRANCH}_coreengine #App Name
  NEW_LOG: /var/log/containers/core-engine/$APP_NAME.log 
  OLD_LOG: /var/log/containers/core-engine/$APP_NAME-$(date -d '-1 day' '+%d-%m-%Y').log
  IMAGE_NAME: $IMAGE_REPO/$CI_COMMIT_BRANCH-$CI_PROJECT_NAME:$CI_PIPELINE_IID
  LATEST_TAG: $IMAGE_REPO/$CI_COMMIT_BRANCH-$CI_PROJECT_NAME:latest #tag to be used in latest image
  VERSION_NO: v01
  ENVIROMENT: $CI_COMMIT_BRANCH
  PORT_MAPPING: 8081:8099 
# Run when not schedule
.rules_template: &rules_config
  rules:
    - if: ($CI_COMMIT_BRANCH == 'dev' || $CI_COMMIT_BRANCH == 'iut') && $CI_PIPELINE_SOURCE != "schedule"

# RUn when schedule merge
.rules_merge: &merge_rule
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "iut"


merge:
  stage: merge
  image: 
    name: bitnami/git
  variables:
    GIT_PATH: gitlab.idigicloudtech.com/$CI_PROJECT_NAMESPACE/middleware-coreengine.git
  before_script:
    - git clone -b dev https://runner:$TOKEN@$GIT_PATH && cd $CI_PROJECT_NAME
    - git status
    - git config --global user.email "runner@idigicloudtech.com" && git config --global user.name "GitLabRunner"
    - chmod +x helper.sh
    - git checkout iut
    - git status
  script:
    - ./helper.sh mergeFunc
    - git merge origin/dev
    - git push origin iut
  <<: *merge_rule


test:
  stage: test
  image: gradle:7.4.2-jdk17-focal
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
  cache:
    paths:
      - $CI_PROJECT_DIR/application/projects/.gradle/caches
  before_script:
    - cd application/projects/
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle clean check 

build:
  image: gradle:7.4.2-jdk17-focal
  stage: build
  environment:
    name: $ENVIROMENT
  cache:
    paths:
      - $CI_PROJECT_DIR/application/projects/.gradle/caches
  before_script:
    - cd application/projects/
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - mv $ENV .env
  script:
    - gradle clean build -x test -x sonarlintMain -x sonarlintTest  ## Ignoring tests, SonarTests so build can pass
    - echo "Compile complete."
  artifacts:
    expire_in: 1 day
    paths:
      - $CI_PROJECT_DIR/application/projects/build/libs
  <<: *rules_config

build image:
  stage: docker
  before_script:
    - cd application/projects/
  script:
    - echo "Building With Version Tag $IMAGE_NAME"
    - docker build -t $IMAGE_NAME .
    - echo "Building With Latest Tag $LATEST_TAG"
    - docker build -t $LATEST_TAG .
  environment:
    name: $ENVIROMENT
  <<: *rules_config

push image:
  stage: docker
  # variables:
  #   GIT_STRATEGY: none
  extends: build image
  script:
    - docker login harbor.idigicloudtech.com -u $REG_USER -p $REG_PASS
    - docker push $IMAGE_NAME
    - docker push $LATEST_TAG
  after_script:
    - docker rmi $IMAGE_NAME $LATEST_TAG
  environment:
    name: $ENVIROMENT
  needs:
    - job: build image
  <<: *rules_config

.deploy_template: &deploy_config
  before_script:
    - chmod 400 $SSH_KEY
    - scp -o StrictHostKeyChecking=no -i $SSH_KEY $ENV helper.sh $DEPLOY_SERVER:/home/gitlab/build/
    - echo $IMAGE_NAME
  script:
    - echo "Deploying application..."
    - echo $CI_PROJECT_NAME
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $DEPLOY_SERVER
      "cd build;
      docker login harbor.idigicloudtech.com -u $REG_USER -p $REG_PASS &&
      docker stop $APP_NAME;
      docker rm  $APP_NAME;
      chmod +x helper.sh;
      ./helper.sh logFunc $OLD_LOG $NEW_LOG;
      docker run -d -p $PORT_MAPPING 
      --restart=always
      -v $NEW_LOG:/app/jdbcApp.log
      --env-file /home/gitlab/.env
      --name $APP_NAME-$VERSION_NO $IMAGE_NAME;
      rm helper.sh .env;
      docker image prune -a -f --filter 'until=10m'"
    - echo "Application successfully deployed."
  environment:
    name: $ENVIROMENT
    url: http://192.168.100.178:8081/graphiql


deploy:
  stage: deploy
  <<: *deploy_config
  <<: *rules_config

deploy latest:
  stage: deploy 
  variables:
    IMAGE_NAME: $IMAGE_REPO/$CI_COMMIT_BRANCH-$CI_PROJECT_NAME:latest
  <<: *deploy_config
  <<: *merge_rule
  when: on_failure