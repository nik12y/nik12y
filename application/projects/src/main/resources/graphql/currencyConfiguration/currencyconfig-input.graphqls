input CurrencyInput{

        currencyCode : String! @Size(min: 3, max: 3, message: "currencyCode.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
        currencyName : String! @Size(min: 1, max: 35, message: "currencyName.message") @Pattern(regexp: "[A-Za-z0-9 ]+",message: "Currency Name should be alphanumeric of size upto 35")
        isoNumericCode : Int! @PositiveOrZero(message : "Module Users Cannot be negative")
        countryName : String! @Size(min: 1, max: 35, message: "countryName.message") @Pattern(regexp: "[A-Za-z ]+",message: "Country name should be alphabet of size upto 35")
        countryCode : String! @Size(min: 2, max: 2, message: "countryCode.message") @Pattern(regexp: "[A-Z]+",message: "Country code should be uppercase alphabet of size upto 2")
        locale : String! @Size(min: 1, max: 15, message: "locale.message") @Pattern(regexp: "[A-Za-z_]+",message: "Locale should be of size upto 15")
    	alternateCurrencyCode : String @Size(min: 0, max: 12, message: "alternateCurrencyCode.message") @Pattern(regexp: "[A-Za-z0-9]+",message: "Alternate currency code should be alphanumeric of size upto 12")
    	currencySymbol : String @Size(min: 1, max: 100, message: "currencySymbol.message") @Pattern(regexp: "[د.إAfLԴKz$ƒманКМ৳лвب.د₣Bs.R$PBr₣¥₡Kčkrد.ج£Nfk€ლ₵D₣QKnGFtRp₪₹ع.د﷼Krد.ا¥Sh៛₩د.ك〒₭ل.لRsLل.دد.م.денK₮PUM₨ރ.MKRMMTn₦C$kr₨ر.ع.B/.S/.K₱₨zł₲ر.قLdinр.₣ر.س₨£krLeShDbل.سLЅМmد.تT$₤₴Bs F₫VtT₣﷼RZK]+",message: "Currency code should be uppercase alphabet of size 3")
    	currencyDescription : String @Size(min: 0, max: 10, message: "currencyDescription.message") @Pattern(regexp: "[A-Za-z0-9 ]+",message: "Currency Description should be alphanumeric of size upto 10")
    	currencyCategory : String @Size(min: 0, max: 3, message: "currencyCategory.message") @Pattern(regexp: "[A-Za-z0-9]+",message: "Currency category should be alphanumeric of size upto 3")
    	decimals : Int! @PositiveOrZero(message : "Module Users Cannot be negative")
    	dayDivisor : String! @Size(min: 1, max: 25, message: "dayDivisor.message") @Pattern(regexp: "[A-Za-z0-9/ ]+",message: "Day Divisor should be alphanumeric of size upto 25")
    	spotDays : Int! @PositiveOrZero(message : "Module Users Cannot be negative")
    	fxNettingDays : Int @PositiveOrZero(message : "Module Users Cannot be negative")
    	settlementDays : Int @PositiveOrZero(message : "Module Users Cannot be negative")
    	calenderId : String! @Size(min: 1, max: 25, message: "calenderId.message") @Pattern(regexp: "[A-Za-z0-9 ]+",message: "Calendar code should be alphanumeric of size upto 25")
    	beforeFormattingFlag : Boolean
        afterFormattingFlag : Boolean
        includeSpaceFormattingFlag : Boolean
        days : Int @PositiveOrZero(message : "Module Users Cannot be negative")
        hours : Int @PositiveOrZero(message : "Module Users Cannot be negative")
        minutes : Int @PositiveOrZero(message : "Module Users Cannot be negative")
        enableMt101Remit : Boolean
        enableMt103Stp : Boolean
        indexFlag : Boolean
        enableMt202Cov : Boolean
        clsCurrencyFlag : Boolean
        validateTag50fFlag : Boolean
        preferredHoliday1 : String! @Size(min: 1, max: 10, message: "preferredHoliday1.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 1 should be alphabet of size upto 10")
        preferredHoliday2 : String @Size(min: 0, max: 10, message: "preferredHoliday2.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 1 should be alphabet of size upto 10")
        preferredHoliday3 : String @Size(min: 0, max: 10, message: "preferredHoliday3.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 1 should be alphabet of size upto 10")
        roundingRule : String! @Size(min: 1, max: 10, message: "roundingRule.message") @Pattern(regexp: "[A-Za-z ]+",message: "Rounding Rule should be alphabet of size upto 10")
        roundingUnit : Int @PositiveOrZero(message : "Module Users Cannot be negative")
        amountFormatMaskPtt : String! @Size(min: 1, max: 40, message: "amountFormatMaskPtt.message") @Pattern(regexp: "[BGD9]+",message: "Formatting pattern should be of size upto 40 conataining B,G,D,9")
        euroTransactionCurrency : Boolean
        inLegCurrency : String! @Size(min: 3, max: 3, message: "inLegCurrency.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
        outLegCurrency : String! @Size(min: 3, max: 3, message: "outLegCurrency.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
        euroCloseFlag : Boolean
        creditExchangeLimit : Float @Digits(integer : 1, fraction : 1, message : "creditExchangeLimit.message") @PositiveOrZero(message : "Overall limit cannot be negative.")
        debitExchangeLimit : Float @Digits(integer : 1, fraction : 1, message : "debitExchangeLimit.message") @PositiveOrZero(message : "Overall limit cannot be negative.")
        extraFieldName : String @Size(min: 0, max: 10, message: "extraFieldName.message") @Pattern(regexp: "[A-Za-z0-9_ ]+",message: "Field name should be alphanumeric of of size upto 10")
        extraFiledvalue : String @Size(min: 0, max: 35, message: "extraFiledvalue.message") @Pattern(regexp: "[A-Za-z0-9_ ]+",message: "Value should be alphanumeric of of size upto 35")
        currencyCountryCode : String @Size(min: 2, max: 2, message: "currencyCountryCode.message") @Pattern(regexp: "[A-Z]+",message: "Country code should be uppercase alphabet of size 2")
        currencyCountryName : String @Size(min: 1, max: 35, message: "currencyCountryName.message") @Pattern(regexp: "[A-Za-z ]+",message: "Country name should be uppercase or lowercase alphabet of size upto 35")
        action : String!
        status : String!
        recordVersion : Int!
        createdBy: String
        creationTime: String
        lastUpdatedBy: String
        lastUpdatedTime: String

}