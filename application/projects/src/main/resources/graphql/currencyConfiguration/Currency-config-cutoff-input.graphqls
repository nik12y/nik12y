input CurrencyCutOff{

            currencyCode : String @Size(min: 3, max: 3, message: "currencyCode.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
            days : Int @PositiveOrZero(message : "Days cannot be negative")
            hours : Int @PositiveOrZero(message : "Hours cannot be negative")
            minutes : Int @PositiveOrZero(message : "Minutes cannot be negative")
            enableMt101Remit : Boolean
            enableMt103Stp : Boolean
            indexFlag : Boolean
            enableMt202Cov : Boolean
            clsCurrencyFlag : Boolean
            validateTag50fFlag : Boolean
            preferredHoliday1 : String! @Size(min: 1, max: 10, message: "preferredHoliday1.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 1 should be alphabet of size up to 10")
            preferredHoliday2 : String @Size(min: 0, max: 10, message: "preferredHoliday2.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 2 should be alphabet of size up to 10")
            preferredHoliday3 : String @Size(min: 0, max: 10, message: "preferredHoliday3.message") @Pattern(regexp: "[A-Za-z]+",message: "Preferred Holiday 3 should be alphabet of size up to 10")
            roundingRule : String! @Size(min: 1, max: 10, message: "roundingRule.message") @Pattern(regexp: "[A-Za-z ]+",message: "Rounding Rule should be alphabet of size up to 10")
            roundingUnit : Float @Digits(integer : 1, fraction : 5, message : "roundingUnit.message") @PositiveOrZero(message : "Rounding unit cannot be negative.")
            amountFormatMaskPtt : String! @Size(min: 1, max: 40, message: "amountFormatMaskPtt.message") @Pattern(regexp: "[BGD9]+",message: "Formatting pattern should be of size up to 40 containing B,G,D,9")
            euroTransactionCurrency : Boolean
            inLegCurrency : String! @Size(min: 3, max: 3, message: "inLegCurrency.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
            outLegCurrency : String! @Size(min: 3, max: 3, message: "outLegCurrency.message") @Pattern(regexp: "[A-Z]+",message: "Currency code should be uppercase alphabet of size 3")
            euroCloseFlag : Boolean
            creditExchangeLimit : Float @Digits(integer : 1, fraction : 1, message : "creditExchangeLimit.message") @PositiveOrZero(message : "Overall limit cannot be negative.")
            debitExchangeLimit : Float @Digits(integer : 1, fraction : 1, message : "debitExchangeLimit.message") @PositiveOrZero(message : "Overall limit cannot be negative.")
}